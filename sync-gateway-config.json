{
   "SSLCert": "/etc/ssl/private/cloud.openmoney.cc.sync.crt",
   "SSLKey": "/etc/ssl/private/cloud.openmoney.cc.key.insecure",
   "interface":":4984",
   "adminInterface":":4985",
   "log":["CRUD", "CRUD+", "HTTP", "HTTP+", "Access", "Cache", "Shadow", "Shadow+", "Changes", "Changes+"],
   "databases":{
      "openmoney_shadow":{
        "shadow": { 
    "server": "http://localhost:8091",
    "bucket": "openmoney"},
        "sync":`function(doc, olddoc) {
            function base64_decode(data) {
                  //  discuss at: http://phpjs.org/functions/base64_decode/
                  // original by: Tyler Akins (http://rumkin.com)
                  // improved by: Thunder.m
                  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                  //    input by: Aman Gupta
                  //    input by: Brett Zamir (http://brett-zamir.me)
                  // bugfixed by: Onno Marsman
                  // bugfixed by: Pellentesque Malesuada
                  // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
                  //   returns 1: 'Kevin van Zonneveld'
                  //   example 2: base64_decode('YQ===');
                  //   returns 2: 'a'

                  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
                    ac = 0,
                    dec = '',
                    tmp_arr = [];

                  if (!data) {
                    return data;
                  }

                  data += '';

                  do { // unpack four hexets into three octets using index points in b64
                    h1 = b64.indexOf(data.charAt(i++));
                    h2 = b64.indexOf(data.charAt(i++));
                    h3 = b64.indexOf(data.charAt(i++));
                    h4 = b64.indexOf(data.charAt(i++));

                    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

                    o1 = bits >> 16 & 0xff;
                    o2 = bits >> 8 & 0xff;
                    o3 = bits & 0xff;

                    if (h3 == 64) {
                      tmp_arr[ac++] = String.fromCharCode(o1);
                    } else if (h4 == 64) {
                      tmp_arr[ac++] = String.fromCharCode(o1, o2);
                    } else {
                      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
                    }
                  } while (i < data.length);

                  dec = tmp_arr.join('');
                  
                  

                  return dec
                }

            function base64_encode(data) {
                  //  discuss at: http://phpjs.org/functions/base64_encode/
                  // original by: Tyler Akins (http://rumkin.com)
                  // improved by: Bayron Guevara
                  // improved by: Thunder.m
                  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                  // improved by: RafaÅ‚ Kukawski (http://kukawski.pl)
                  // bugfixed by: Pellentesque Malesuada
                  //   example 1: base64_encode('Kevin van Zonneveld');
                  //   returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
                  //   example 2: base64_encode('a');
                  //   returns 2: 'YQ=='

                  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
                    ac = 0,
                    enc = '',
                    tmp_arr = [];

                  if (!data) {
                    return data;
                  }

                  do { // pack three octets into four hexets
                    o1 = data.charCodeAt(i++);
                    o2 = data.charCodeAt(i++);
                    o3 = data.charCodeAt(i++);

                    bits = o1 << 16 | o2 << 8 | o3;

                    h1 = bits >> 18 & 0x3f;
                    h2 = bits >> 12 & 0x3f;
                    h3 = bits >> 6 & 0x3f;
                    h4 = bits & 0x3f;

                    // use hexets to index into b64, and append result to encoded string
                    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
                  } while (i < data.length);

                  enc = tmp_arr.join('');

                  var r = data.length % 3;

                  return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
                }

            function isNumber(n) {
            	  return !isNaN(parseFloat(n)) && isFinite(n);
            }
            
            var channelDelimiter = "@";
            
            if (doc._id != null) {
                var table = doc._id.substring(0,doc._id.indexOf(","));
                var index = doc._id.substring(doc._id.indexOf(",")+1);
                if (doc.type == "users") {
                    channel(doc.type + channelDelimiter + doc.username);
                    if (olddoc == null) {
                        if (!doc.username || !doc.password || !doc.password_encryption_algorithm || !doc.created ) {
                            throw({forbidden: "Missing required properties"});
                        } else if (doc.username.length < 2) {
                            throw({forbidden: "Username length has to be greater than one character."});
                        } else if (doc.password.length < 2) {
                            throw({forbidden: "password has to be greater than one character"});
                        } else if (! Array.isArray(doc.password_encryption_algorithm) ) { 
                            throw({forbidden: "provide a valid encryption algorithm"});
                        }
                        access(doc.username, doc.type + channelDelimiter + doc.username);
                    } else {
                        if (doc._deleted) {
                            requireUser(olddoc.username);
                        } else {
                        	if (!doc.username || !doc.password || !doc.password_encryption_algorithm || !doc.created ) {
                                throw({forbidden: "Missing required properties"});
                            } else if (doc.username.length < 2) {
                                throw({forbidden: "Username length has to be greater than one character."});
                            } else if (doc.password.length < 2) {
                                throw({forbidden: "password has to be greater than one character"});
                            } else if (! Array.isArray(doc.password_encryption_algorithm) ) { 
                                throw({forbidden: "provide a valid encryption algorithm"});
                            }
                            if (olddoc.username != doc.username) {
                                throw({forbidden: "Cannot change username! Delete first then create new user!"});
                            }
                            requireUser(olddoc.username);
                        }
                    }
                } else if (doc.type == "trading_name") {
                    var trading_name = doc.name ;
                    var currency = base64_encode( doc.currency );
                    channel(doc.type + channelDelimiter + trading_name + channelDelimiter + currency);
                    channel( "currency" + channelDelimiter + currency )
                    if (olddoc == null) {
                        if (!doc.steward || !doc.name || !doc.currency || !doc.created ) {
                            throw( { forbidden: "Missing required properties" } );
                        }
                        requireUser( doc.steward )
                        access( doc.steward , "currency" + channelDelimiter + currency)
                        access( doc.steward , doc.type + channelDelimiter + trading_name + channelDelimiter + currency )
                        //role( doc.steward, "role:" + doc.name + "_" + doc.currency)
                    } else {
                        if (doc._deleted) {
                            requireUser(olddoc.steward);
                        } else {
                            if (!doc.steward || !doc.name || !doc.currency || !doc.created ) {
                                throw({forbidden: "Missing required properties"});
                            }
                            requireUser(olddoc.steward);
                        }
                    }
                } else if (doc.type == "space") {
                    var space = doc.space;              
                    channel(doc.type + channelDelimiter + space);
                    if (olddoc == null) {
                        if (!doc.steward || typeof doc.space == 'undefined' || !doc.created) {
                            throw({forbidden: "Missing required properties"});
                        }
                        access(doc.steward, doc.type + channelDelimiter + space);
                    } else {
                        if (doc._deleted) {
                            requireUser(olddoc.steward);
                        } else {
                            if (!doc.steward || typeof doc.space == 'undefined' || !doc.created) {
                                throw({forbidden: "Missing required properties"});
                            } 
                            requireUser(olddoc.steward);
                        }
                    }
                } else if (doc.type == "currency") {
                    var currency = base64_encode( doc.currency );
                    channel(doc.type + channelDelimiter + currency);
                    if (olddoc == null) {
                        if (!doc.steward || !doc.currency || !doc.created ) {
                            throw({forbidden: "Missing required properties"});
                        }
                        access(doc.steward, doc.type + channelDelimiter + currency);
                    } else {
                        if (doc._deleted) {
                            requireUser(olddoc.steward);
                        } else {
                            if (!doc.steward || !doc.currency || !doc.created ) {
                                throw({forbidden: "Missing required properties"});
                            }
                            requireUser(olddoc.steward);
                        }
                    }
                } else if (doc.type == "currency_view") {
                    var currency = base64_encode( doc.currency );
                    channel(doc.type + channelDelimiter + currency);
                    if (olddoc == null) {
                        if (!doc.steward || !doc.currency || !doc.created ) {
                            throw({forbidden: "Missing required properties"});
                        } else if (! Array.isArray(doc.steward) ) {
                            throw({forbidden: "Steward array missing."});
                        } else if (doc.currency.length < 2) {
                            throw({forbidden: "Please enter currency"});
                        }
                        access(doc.steward, doc.type + channelDelimiter + currency);
                        access(doc.steward, "currency" + channelDelimiter + currency);
                    } else {
                        if (doc._deleted) {
                            requireUser(olddoc.steward);
                        } else {
                            if (!doc.steward || !doc.currency || !doc.created ) {
                                throw({forbidden: "Missing required properties"});
                            } else if (! Array.isArray(doc.steward) ) {
                                throw({forbidden: "Steward array missing."});
                            } else if (doc.currency.length < 2) {
                                throw({forbidden: "Please enter currency"});
                            } 
                            requireUser(olddoc.steward);
                        }
                    }
                } else if (doc.type == "trading_name_journal") {
                    var from = doc.from;
                    var to = doc.to; 
                    var timestamp = doc.timestamp;
                    var channelTimestamp = timestamp
                    if (! isNumber( timestamp ) ) {
                    	channelTimestamp = timestamp.replace(/:/g,'.') // Replace All Colons
                    }
                    
                    var currency = base64_encode( doc.currency );
                    
                    if (olddoc == null) {
                        if (!doc.from || !doc.to || !doc.amount || !doc.currency || !doc.timestamp ) {
                            throw({forbidden: "Missing required properties"});
                        }
                        channel("trading_name" + channelDelimiter + from + channelDelimiter + currency)
                        channel("trading_name" + channelDelimiter + to + channelDelimiter + currency)
                        //channel(table + channelDelimiter + from + channelDelimiter + to + channelDelimiter + channelTimestamp);
                    } else {
                        if (doc._deleted) {
                            requireUser([olddoc.from , olddoc.to]);
                        } else {
                            if (!doc.from || !doc.to || !doc.amount || !doc.currency || !doc.timestamp ) {
                                throw({forbidden: "Missing required properties"});
                            }
                            //channel(table + channelDelimiter + from + channelDelimiter + to + channelDelimiter + channelTimestamp);
                            channel("trading_name" + channelDelimiter + from + channelDelimiter + currency)
                            channel("trading_name" + channelDelimiter + to + channelDelimiter + currency)
                            //requireUser([olddoc.from , olddoc.to]);
                        }
                    }
                } else if (doc.type == "beamtag") {                  
                    //var username = index.substring(0,index.indexOf(",")) ;
                    //var beamTag = index.substring( index.indexOf( "," ) + 1 );
                    if (!doc.username || !doc.hashTag || !doc.type || !doc.created) {
                        throw({forbidden: "Missing required properties"});
                    }
                    channel(doc.type + channelDelimiter + doc.username + channelDelimiter + doc.hashTag);
                    if (olddoc == null) {
                        access(doc.username, doc.type + channelDelimiter + doc.username + channelDelimiter + doc.hashTag);
                    } else {
                        if (doc._deleted) {
                            requireUser(olddoc.username);
                        } else {
                            if (!doc.username || !doc.hashTag || !doc.type || !doc.created) {
                                throw( { forbidden: "Missing required properties" } );
                            } 
                            requireUser(olddoc.username);
                        }
                    }
                } else if (doc.type == "profile") {
                	if (!doc.type || !doc.username ) {
                		throw({forbidden: "Missing required properties"});
                	}
                	channel(doc.type + channelDelimiter + doc.username)
                	access(doc.username, doc.type + channelDelimiter + doc.username);
                	if (olddoc == null) {
                		access(doc.username, doc.type + channelDelimiter + doc.username)
                	} else {
                		if(doc.username != 'anonymous')
                			requireUser(olddoc.username);
                	}
                }
            }
    }`, "users": {
                "GUEST": {"disabled": true}
        }
    }
   }
}
